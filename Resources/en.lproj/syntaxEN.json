{
	"_method_": {},
	"cs.SemVer": {
		"Instance": {
			"new()": {
				"Syntax": "**.new**()",
				"Params": [],
				"Summary": ""
			}
		},
		"Version": {
			"new()": {
				"Syntax": "**.new**()",
				"Params": [],
				"Summary": ""
			}
		},
		"Range": {
			"new()": {
				"Syntax": "**.new**( *variant* : Variant )",
				"Params": [
					[
						"variant",
						"Variant",
						"->"
					]
				],
				"Summary": ""
			}
		}
	},
	"Instance": {
		"patch()": {
			"Syntax": "**.patch**( *v1* : Variant )->result : Integer",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"result",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"valid()": {
			"Syntax": "**.valid**( *v1* : Variant )->result : Boolean",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"version()": {
			"Syntax": "**.version**()->version : Object",
			"Params": [
				[
					"version",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"compare()": {
			"Syntax": "**.compare**( *v1* : Variant; *v2* : Variant )->result : Integer",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"v2",
					"Variant",
					"->"
				],
				[
					"result",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"major()": {
			"Syntax": "**.major**( *v1* : Variant )->result : Integer",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"result",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"lt()": {
			"Syntax": "**.lt**( *v1* : Variant; *v2* : Variant )->result : Boolean",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"v2",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"minor()": {
			"Syntax": "**.minor**( *v1* : Variant )->result : Integer",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"result",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"gt()": {
			"Syntax": "**.gt**( *v1* : Variant; *v2* : Variant )->result : Boolean",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"v2",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"gte()": {
			"Syntax": "**.gte**( *v1* : Variant; *v2* : Variant )->result : Boolean",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"v2",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"lte()": {
			"Syntax": "**.lte**( *v1* : Variant; *v2* : Variant )->result : Boolean",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"v2",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"eq()": {
			"Syntax": "**.eq**( *v1* : Variant; *v2* : Variant )->result : Boolean",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"v2",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"neq()": {
			"Syntax": "**.neq**( *v1* : Variant; *v2* : Variant )->result : Boolean",
			"Params": [
				[
					"v1",
					"Variant",
					"->"
				],
				[
					"v2",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"range()": {
			"Syntax": "**.range**( *rangeInfo* : Variant )->range : cs.SemVer.Range",
			"Params": [
				[
					"rangeInfo",
					"Variant",
					"->"
				],
				[
					"range",
					"cs.SemVer.Range",
					"<-"
				]
			],
			"Summary": ""
		}
	},
	"Version": {
		"gte()": {
			"Syntax": "**.gte**( *version* : Variant )->result : Boolean",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"compareTo()": {
			"Syntax": "**.compareTo**( *version* : Variant )->result : Integer",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"gt()": {
			"Syntax": "**.gt**( *version* : Variant )->result : Boolean",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"equalTo()": {
			"Syntax": "**.equalTo**( *version* : Variant )->result : Boolean",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"lt()": {
			"Syntax": "**.lt**( *version* : Variant )->result : Boolean",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"eq()": {
			"Syntax": "**.eq**( *version* : Variant )->result : Boolean",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"lte()": {
			"Syntax": "**.lte**( *version* : Variant )->result : Boolean",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"neq()": {
			"Syntax": "**.neq**( *version* : Variant )->result : Boolean",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"inc()": {
			"Syntax": "**.inc**( *part* : Text )",
			"Params": [
				[
					"part",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"increment()": {
			"Syntax": "**.increment**( *part* : Text )",
			"Params": [
				[
					"part",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"decrement()": {
			"Syntax": "**.decrement**( *part* : Text )",
			"Params": [
				[
					"part",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"maxMinor()": {
			"Syntax": "**.maxMinor**()->version : Object",
			"Params": [
				[
					"version",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"maxMajor()": {
			"Syntax": "**.maxMajor**()->version : Object",
			"Params": [
				[
					"version",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		}
	},
	"Range": {
		"firstSatisfying()": {
			"Syntax": "**.firstSatisfying**( *versions* : Collection ) : cs.SemVer.Version",
			"Params": [
				[
					"versions",
					"Collection",
					"->"
				],
				[
					"",
					"cs.SemVer.Version",
					"<-"
				]
			],
			"Summary": ""
		},
		"lastSatisfying()": {
			"Syntax": "**.lastSatisfying**( *versions* : Collection ) : cs.SemVer.Version",
			"Params": [
				[
					"versions",
					"Collection",
					"->"
				],
				[
					"",
					"cs.SemVer.Version",
					"<-"
				]
			],
			"Summary": ""
		},
		"maxSatisfying()": {
			"Syntax": "**.maxSatisfying**( *versions* : Collection )->result : cs.SemVer.Version",
			"Params": [
				[
					"versions",
					"Collection",
					"->"
				],
				[
					"result",
					"cs.SemVer.Version",
					"<-"
				]
			],
			"Summary": ""
		},
		"parseRange()": {
			"Syntax": "**.parseRange**( *text* : Text )->range : cs.SemVer.Range",
			"Params": [
				[
					"text",
					"Text",
					"->"
				],
				[
					"range",
					"cs.SemVer.Range",
					"<-"
				]
			],
			"Summary": ""
		},
		"satisfiedBy()": {
			"Syntax": "**.satisfiedBy**( *version* : Variant )->result : Boolean",
			"Params": [
				[
					"version",
					"Variant",
					"->"
				],
				[
					"result",
					"Boolean",
					"<-"
				]
			],
			"Summary": ""
		},
		"minSatisfying()": {
			"Syntax": "**.minSatisfying**( *versions* : Collection )->result : cs.SemVer.Version",
			"Params": [
				[
					"versions",
					"Collection",
					"->"
				],
				[
					"result",
					"cs.SemVer.Version",
					"<-"
				]
			],
			"Summary": ""
		},
		"set": {
			"Syntax": "set : Collection"
		}
	}
}